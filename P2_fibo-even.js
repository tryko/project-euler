/**
 Project Euler: Problem 2: Even Fibonacci Numbers

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed n, find the sum of the even-valued terms.

 */

function fiboEvenSum(n) {
  let fib1 = 1;
  let fib2 = 2;
  let sum = 0;
  let evenSum = 0;
  for (let i = 0; i < n; i = fib2) {
    if (fib2 % 2 === 0 && fib2 <= n) {
      evenSum += fib2;
    }
    sum = fib1 + fib2;
    fib1 = fib2;
    fib2 = sum;
  }
  return evenSum;
}

// // console.log(fiboEvenSum(8)); //s hould return 10.
// // console.log(fiboEvenSum(10)); // should return 10.
console.log(fiboEvenSum(34)); // should return 44.
// // console.log(fiboEvenSum(60)) // should return 44.

// function fiboEvenSum(number) {

// 	// Set the last and current numbers to the first two Fibonacci numbers
// 	let lastNum = 1;
// 	let currentNum = 2;

// 	let total = 0;

// 	while(currentNum <= number) {

// 		if(currentNum % 2 === 0) {
// 			total += currentNum;
// 		}

// 		// Store the current Fibonacci number before updating it as it's needed below for lastNumber in the next iteration
// 		let tempCurrentNum = currentNum;
// 		// Update numbers for next iteration
// 		currentNum += lastNum;
// 		lastNum = tempCurrentNum;

// 	}

// 	return total;
// }

// // console.log(fiboEvenSum(8)); //s hould return 10.
// // console.log(fiboEvenSum(10)); // should return 10.
// console.log(fiboEvenSum(34)); // should return 44.
// // console.log(fiboEvenSum(60)) // should return 44.
